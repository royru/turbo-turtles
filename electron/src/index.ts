import { app, BrowserWindow } from 'electron'
import activeWindow from 'active-win'
import { chmodSync } from 'fs'
import { join } from 'path'
import { execSync } from 'child_process'

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
// declare const MAIN_WINDOW_WEBPACK_ENTRY: string
// declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string

let oldWindow: activeWindow.Result
let windowSwitches = 0

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit()
}

function fixModulePermissions() {
  // hacky module permission fix for "active-win"
  if (process.platform === "darwin") {
    chmodSync(join(app.getAppPath(), ".webpack/main/native_modules/main"), "777")
  }
}

function getUserName() {
  return execSync('whoami').toString().trim()
}

async function updateWindowSwitches() {
  try {
    const res = await activeWindow()
    if (res) {
      if (oldWindow && (oldWindow.id !== res.id || oldWindow.owner.processId !== res.owner.processId)) {
        console.log('window switch')
        windowSwitches++
      }
      oldWindow = res
    }
  } catch (error) {
    console.error(error)
  }
}

async function sendData() {
  try {
    const userName = getUserName()
    await fetch(`https://turbo-turtles.vercel.app/api/update?user=${userName}&steps=${windowSwitches}`)
    console.log('request successful')
    windowSwitches = 0
  } catch (error) {
    console.error('failed pushing to server', error)
  }
}

async function startTracking() {
  fixModulePermissions()
  updateWindowSwitches()
  setInterval(sendData, 10000)
}

const start = (): void => {
  startTracking()

  // // Create the browser window.
  // const mainWindow = new BrowserWindow({
  //   height: 600,
  //   width: 800,
  //   webPreferences: {
  //     preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
  //   },
  // })

  // // and load the index.html of the app.
  // mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY)

  // // Open the DevTools.
  // mainWindow.webContents.openDevTools()
}

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', start)

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
// app.on('window-all-closed', () => {
//   if (process.platform !== 'darwin') {
//     app.quit()
//   }
// })

// app.on('activate', () => {
//   // On OS X it's common to re-create a window in the app when the
//   // dock icon is clicked and there are no other windows open.
//   if (BrowserWindow.getAllWindows().length === 0) {
//     start()
//   }
// })

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
